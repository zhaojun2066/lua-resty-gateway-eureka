user  root;
worker_processes  4;

#error_log  logs/error.log warn;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        /var/run/nginx.pid;
worker_rlimit_nofile 65535;

events {
    use epoll;
    #multi_accept on;
    worker_connections 65535;

}


http {
    server_tokens   off;
    default_type  application/octet-stream;
    client_body_timeout     60s;
    client_header_timeout   60s;
    send_timeout            10s;
    keepalive_timeout       30s;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    client_max_body_size            5m;
    client_body_buffer_size         5m;
    client_header_buffer_size       16k;
    large_client_header_buffers     4       16k;

    # gzip
    gzip on;
    gzip_comp_level 6;
    gzip_types application/json text/plain application/x-javascript text/css;
    #sendfile        on;
    #tcp_nopush     on;
    lua_socket_log_errors off;
    lua_package_path "$prefix/lua/?.lua;;";  #lua 模块
    #lua_package_cpath "/data/appcenter/gateway/lualib/?.so;;";  #c模块
    lua_max_pending_timers 25000;
    lua_max_running_timers 23000;
    lua_regex_match_limit 100000;
    lua_regex_cache_max_entries 8192;
    #lua_shared_dict plugin-limit-req 50m;
    #lua_shared_dict health_locks 1m;
    #lua_shared_dict limit_req_limit_locks 10m;
    #lua_shared_dict worker-events 15m;
    #lua_shared_dict limit_req_store 50m;
    include mime.types;

    init_by_lua_block {
        gateway = require("gateway")
        gateway.http_init()
    }

    init_worker_by_lua_block {
        gateway.http_init_worker()
    }

    upstream gateway_backend {
        server 0.0.0.1;
        balancer_by_lua_block {
            gateway.http_balancer_phase()
        }
        keepalive 320;
    }

    server {
        listen       8010;
        server_name  localhost;
        lua_code_cache on;
        #charset utf-8;
        access_log  on;
        location / {
            access_by_lua_block {
                gateway.http_access_phase()
            }
            proxy_http_version 1.1;

            set $var_x_forwarded_for        $remote_addr;
            if ($http_x_forwarded_for != "") {
                set $var_x_forwarded_for "${http_x_forwarded_for}, ${realip_remote_addr}";
            }
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $var_x_forwarded_for;
            proxy_pass         http://gateway_backend;

            header_filter_by_lua_block {
                gateway.http_header_filter_phase()
            }

            body_filter_by_lua_block {
                gateway.http_body_filter_phase()
            }

            log_by_lua_block {
                gateway.http_log_phase()
            }

            rewrite_by_lua_block {
                gateway.http_rewrite_phase()
            }
        }

        location /gateway/plugins {
            proxy_http_version 1.1;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            rewrite_by_lua_block {
                gateway.plugin_rewrite_phase()
            }
            header_filter_by_lua_block {
                gateway.plugin_header_filter_phase()
            }
            content_by_lua_block {
                gateway.plugin_match_router()
            }
        }


        # remove the robots line if you want to use wordpress' virtual robots.txt
        location = /favicon.ico { access_log off; log_not_found off; }

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;

        #location = /50x.html {
        #    root   html;
        #}
    }
}
